// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id    String     @id @default(cuid())
  email String  @unique
  image String?
  name  String
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  lastname String?
  password String?
  role UserRole @default(USER)
  feedbacks Feedback[]
  comments Comment[]
  likes Like[]
  upvotes Upvote[]

  @@map("users")
}
// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime? @map("email_verified")
//   image         String?
//   accounts      Account[]
 
//   @@map("users")
// }

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Feedback {
  feedbackId String     @id @default(uuid())
  author User @relation(fields: [authorId], references: [id])
  authorId String
  title String
  description String
  category Tag @relation(fields: [categoryId], references: [tagId])
  categoryId String
  comments Comment[]
  likes Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  upvotes Upvote[]
}

model Comment {
  commentId String     @id @default(uuid())
  author User @relation(fields:[authorId], references: [id])
  authorId String
  feedback Feedback @relation(fields: [feedbackId], references: [feedbackId])
  feedbackId String
  content String
  createdAt DateTime @default(now())
}

model Like {
  likeId String @id @default(uuid())
  author User @relation(fields: [authorId], references: [id])
  authorId String
  feedback Feedback @relation(fields: [feedbackId], references: [feedbackId])
  feedbackId String
}

model Tag {
  tagId String @id @default(uuid())
  name String
  feedbacks Feedback[]
}

model Upvote {
  id         String   @id @default(uuid())
  authorId     String
  feedbackId String
  user       User     @relation(fields: [authorId], references: [id])
  feedback   Feedback @relation(fields: [feedbackId], references: [feedbackId])
  @@unique([authorId, feedbackId]) // Ensures a user can only upvote a feedback once
}